buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name = "QMXTech"
        url = "https://artifactory.qmxtech.com/artifactory/minecraft-release/"
    }
}

apply plugin: 'scala'
apply plugin: 'forge'

// define the properties file
ext.configFile = file "project.properties"

configFile.withReader {
  // read config.  it shall from now on be referenced as simply config or as project.config
  def prop = new Properties()
  prop.load(it)
  project.ext.config = new ConfigSlurper().parse prop
}

version = System.getenv("BUILD_NAME") ?: "${config.mod_version}." + ( System.getenv("BUILD_NUMBER") ?: "null" )
group = "${config.group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.display_name}"

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    runDir = "run"

    replaceIn "ModularPowersuitsAddons.java"
    replace "@VERSION@", config.version
    replace "@NAME@", config.name
    replace "@DEPENDENCIES@", config.dependencies
    replace "@ID@", config.id
    replace "@CHANNEL@", config.channel
    replace "@CONFIG_PATH@", config.config_path
    replace "@DISPLAY_NAME@", config.display_name
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    
    // Removed for pre-release builds
    //compile 'net.machinemuse.numina:Numina:0.4.0.6-QMX:dev'
    //compile 'net.machinemuse.powersuits:ModularPowersuits:0.11.0.6-QMX:dev'
	compile 'mcp.mobius.waila:Waila:1.5.6_dev1_1.7.10'
	compile 'net.industrial-craft:industrialcraft-2:2.2.658-experimental:dev'
	compile 'appeng:appliedenergistics2:rv2-beta-8:dev'
	compile 'com.enderio:EnderIO:1.7.10-2.2.6.323:dev'
    compile 'com.mod-buildcraft:buildcraft:6.2.6:dev'
    compile 'com.typesafe:config:1.2.1'
	compile fileTree(dir: 'libs', include: '*.jar')

}

new File(config.libs_dir).mkdirs()
def getLibrary(filename) {
  def f = new File(config.libs_dir + filename)
  if (!f.exists()) {
    new URL(config.apisource_url + filename).withInputStream{ i -> f.withOutputStream{ it << i }}
  }
  dependencies {
    compile files(config.libs_dir + filename)
  }
}

getLibrary("ExtraCells-deobf-1.7.10-2.2.25b45.jar")
getLibrary("compactmachines-1.7.10-1.13.jar")
getLibrary("Railcraft-API-9.4.0.0-Compiled.jar")
getLibrary("MineFactoryReloaded-API-[1.7.10]2.8.0RC3-Compiled-591.jar")

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

